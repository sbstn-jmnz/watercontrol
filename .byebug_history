continue
response.body
continue
adminHash[:admin][:password]
Digest::MD5.hexdigest(adminHash[:admin][:password])
continue
admin
exit
admin
continue
adminHash[:admin][:password]
adminHash
continue
adminHash
continue
contine
exit
@meter.measures.create(value: 15, user_id: @user.id)
@user.measures
@meter.measures.count
@user.measures.count
c
@meter.measures.count
@meter.measures
exit
rake
exit
@measure.update!(status: Measure::STATUS.third)
exit
@measure.errors
@measure.valid?
@measure.valid
@measure
#measure
exit
Measure.find(@measure.id).status
exit
Measure.where(meter_id: 75).last.value
Measure.where(meter_id: 75)
Measures.where(meter_id: 75)
measure.errors
measure.valid?
measure
exit
Measure.find 107
params[:measures]
Measure.find(m[:id])
measure
exit
@condo.users.count
exit
@condo.users
exit
meter_id
Measure.where(meter_id: meter_id)
exit
Measure.all
Measure.take
meter_id
Measure.where(meter_id: meter_id)
Measure.where(meter_id: meter_id).last
value.present?
value.present_
value.present
value
exit
condo
condo.id
Sector.take
sectors
exit
condo = Condo.find(params[:condo_id])
exit
condo = @user.sectors.first.condo_id
condo = @user.sectors
exit
@user.sectors
@user.sectors.first
exit
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:status]
assert_equal assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:status]assert_equal assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:status]
assigned_sectors[:sectors][0]
assigned_sectors
exit
sector_params(s)
sector = Sector.find(s[:id])
exit
sector = Sector.find(s[:id])
params[:sectors]
s
exit
sector
s
Sector.take
exit
params.keyes
params
exit
@sectors.reload
@sectors.class
exit
@sectors.class
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
@sector
exit
response.body
response
raponse
exit
params
exit
params
@sector.id
@sector
exit
params
exit
params
exit
params
exit
@sector
params
exit
params
exit
sector_params
params
exit
authenticate_or_request_with_http_token('Application')
params
exit
json(response.body)[:measures].count
response.body
exit
Measure.find_by(meter_id: 157)
Measure.find__by(meter_id: 157)
Measure.find_all_by(meter_id: 157)
Measure.find_by(meter_id: 157).count
Measure.find_by(meter_id: 157)
measure.meter
response.body
exit
Measure.all
json(response.body)
json(response.body)[:measures]
exit
json(response.body)
json(response.body)[:measures]
Meter.find(measure.meter.id).measures.count
exit
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:value]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:status]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure]
assigned_sectors[:sectors][0][:plots][0][:meters][0]
assigned_sectors[:sectors][0][:plots][0][:meters]
assigned_sectors[:sectors][0][:plots][0].meters
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors][1][:plots][:meters]
assigned_sectors[:sectors][1][:plots]
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0][:plots][:meters]
assigned_sectors[:sectors][0][:plots]
exit
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][1][:plots]
assigned_sectors[:sectors][1][:plots][:meters]
assigned_sectors[:sectors][1][:plots].count
assigned_sectors[:sectors][0][:plots].count
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors]
assigned_sectors[:sectors][0].count
assigned_sectors[:sectors][0].keyes
assigned_sectors[:sectors][0]
assigned_sectors[:sectors].count
assigned_sectors[:sectors].keyes
assigned_sectors[:sectors]
assigned_sectors.keys
exit
assigned_sectors
exit
assigned_sectors
exit
assigned_sectors
exit
sectors
exit
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors][:plots]
assigned_sectors[:sectors]
assigned_sectors
assigned_sectors[0]
assigned_sectors[o]
assigned_sectors.sectors
exit
json response.body
response.body.class
response.body
exit
measure_params(m).has_key?(:value)
measure_params(m).has_key?(:value, :comment, :id)
measure_params(m)
exit
m[:id]
m
m.id
exit
m
exit
params[:measures]
params
exit
params
params[:measures]
exit
s.first.meters
s.meters
s.count
s.class
 s = object.plots.where(status: Plot::STATUS.first)
sold_plots
exit
 sold_plots = object.plots.where(status: Plot::STATUS.first)
object.plots.where(status: Plot::STATUS.first)
exit
 id_measure_process = MeasureProcess.where(status: 'active').take.id
Measure.where(measure_process_id: id_measure_process, meter_id: object.id ).count
Measure.where(measure_process_id: id_measure_process, meter_id: object.id )
exit
MeasureProcess.where(status: 'active')
exit
xit
exit
sectors
exit
sectors
exit
xit
user
