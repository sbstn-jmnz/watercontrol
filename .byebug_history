exit
json(response.body)[:measures].count
response.body
exit
Measure.find_by(meter_id: 157)
Measure.find__by(meter_id: 157)
Measure.find_all_by(meter_id: 157)
Measure.find_by(meter_id: 157).count
Measure.find_by(meter_id: 157)
measure.meter
response.body
exit
Measure.all
json(response.body)
json(response.body)[:measures]
exit
json(response.body)
json(response.body)[:measures]
Meter.find(measure.meter.id).measures.count
exit
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:value]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0][:status]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure][0]
assigned_sectors[:sectors][0][:plots][0][:meters][0][:measure]
assigned_sectors[:sectors][0][:plots][0][:meters][0]
assigned_sectors[:sectors][0][:plots][0][:meters]
assigned_sectors[:sectors][0][:plots][0].meters
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors][1][:plots][:meters]
assigned_sectors[:sectors][1][:plots]
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0][:plots][:meters]
assigned_sectors[:sectors][0][:plots]
exit
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][1][:plots]
assigned_sectors[:sectors][1][:plots][:meters]
assigned_sectors[:sectors][1][:plots].count
assigned_sectors[:sectors][0][:plots].count
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors]
assigned_sectors[:sectors][0].count
assigned_sectors[:sectors][0].keyes
assigned_sectors[:sectors][0]
assigned_sectors[:sectors].count
assigned_sectors[:sectors].keyes
assigned_sectors[:sectors]
assigned_sectors.keys
exit
assigned_sectors
exit
assigned_sectors
exit
assigned_sectors
exit
sectors
exit
assigned_sectors[:sectors][0][:plots]
assigned_sectors[:sectors][0]
assigned_sectors[:sectors][:plots]
assigned_sectors[:sectors]
assigned_sectors
assigned_sectors[0]
assigned_sectors[o]
assigned_sectors.sectors
exit
json response.body
response.body.class
response.body
exit
measure_params(m).has_key?(:value)
measure_params(m).has_key?(:value, :comment, :id)
measure_params(m)
exit
m[:id]
m
m.id
exit
m
exit
params[:measures]
params
exit
params
params[:measures]
exit
s.first.meters
s.meters
s.count
s.class
 s = object.plots.where(status: Plot::STATUS.first)
sold_plots
exit
 sold_plots = object.plots.where(status: Plot::STATUS.first)
object.plots.where(status: Plot::STATUS.first)
exit
object
exit
 id_measure_process = MeasureProcess.where(status: 'active').take.id
Measure.where(measure_process_id: id_measure_process, meter_id: object.id ).count
Measure.where(measure_process_id: id_measure_process, meter_id: object.id )
exit
MeasureProcess.where(status: 'active')
exit
xit
exit
sectors
exit
sectors
exit
xit
user
sectors
exit
params
user
sectors
exit
sectors
exit
sector2
sector
exit
user.id
Sector.all
Sector.where(user_id: user.id)
exit
 serializer: Users::UserSerializer
 render json: user, serializer: Users::UserSerializer
 render json: user, status:200, serializer: Users::UserSerializer
user
MeasureProcess.where(status: 'active').count == 1
User.find(params[:user_id])
render json: user
exit
MeasureProcess.where(status: 'active')
exit
params[:user_id]
User.last
exit
params
exit
MeasureProcess.where(status: 'active')
MeasureProcess.where(status: 'active').count == 0
exit
self.password == password
self
password
exit
self
password
exit
User.all
User.last
User.last.id
meter.id
exit
session_params
params
exit
params.class
params.keyes
params
params.user
params.require(:user).permit(:email, :password)
params[:user]
session_params
params
exit
session_params
params
exit
params
exit
params
user = User.find_by(email: admin_params[:email])
exit
user = User.find_by(email: admin_params[:email])
exit
user
user_params
exit
params
user_params
exit
User.new params
params.permit(:name, :rut, :email, :password)
user_params
params
user
exit
ChargeParameter.all
exit
ChargeParameter.all
ChargeParameter.where(condo_id: params[:condo_id])
exit
params
exit
params
exit
params
exit
object.measures.last.class
object.measures.last
exit
object.measures.last.class
object.measures.last
object
